import { StatusCodes } from "http-status-codes";
import { boardModel } from "~/models/BoardModel";
import { invitationModel } from "~/models/invitationModels";
import { userModel } from "~/models/userModel";
import { BOARD_INVITATION_STATUS, INVITATION_TYPES } from "~/utils/constants";
import { pickUser } from "~/utils/formatter";

const createNewBoardInvitation = async (reqBody, inviterId) => {
  try {
    //nguopi moi: chinh la nguoi dang request, lay tu token
    const inviter = await userModel.findOneByID(inviterId);
    // console.log("üöÄ ~ createNewBoardInvitation ~ inviter:", inviter);
    // Ng∆∞·ªùi ƒë∆∞·ª£c m·ªùi: l·∫•y theo email nh·∫≠n t·ª´ ph√≠a FE
    const invitee = await userModel.findOneByEmail(reqBody.inviteeEmail);
    // console.log("üöÄ ~ createNewBoardInvitation ~ invitee:", invitee);
    // T√¨m lu√¥n c√°i board ra ƒë·ªÉ l·∫•y data x·ª≠ l√Ω
    const board = await boardModel.findOneByID(reqBody.boardId);
    // console.log("üöÄ ~ createNewBoardInvitation ~ board:", board);
    // N·∫øu khong t·ªìn t·∫°i 1 trong 3 th√¨ c·ª© th·∫≥ng tay reject
    if (!invitee || !inviter || !board) {
      throw new ApiError(
        StatusCodes.NOT_FOUND,
        "Inviter, Invitee or Board not found!"
      );
    }

    // T·∫°o data c·∫ßn thi·∫øt ƒë·ªÉ l∆∞u v√†o trong DB
    // C√≥ th·ªÉ th·ª≠ b·ªè ho·∫∑c l√†m sai l·ªách type, boardInvitation, status ƒë·ªÉ test xem Model validate ok ch∆∞a.
    const newInvitationData = {
      inviterId,
      inviteeId: invitee._id.toString(), // chuy·ªÉn t·ª´ ObjectId v·ªÅ String v√¨ sang b√™n Model c√≥ check l·∫°i data ·ªü h√†m create
      type: INVITATION_TYPES.BOARD_INVITATION,
      boardInvitation: {
        boardId: board._id.toString(),
        status: BOARD_INVITATION_STATUS.PENDING,
      },
    };

    // G·ªçi sang Model ƒë·ªÅ l∆∞u v√†o DB
    const createdInvitation = await invitationModel.createNewBoardInvitation(
      newInvitationData
    );
    // console.log(
    //   "üöÄ ~ createNewBoardInvitation ~ createdInvitation:",
    //   createdInvitation
    // );
    const getInvitation = await invitationModel.findOneByID(
      createdInvitation.insertedId
    );
    console.log(
      "üöÄ ~ createNewBoardInvitation ~ getInvitation:",
      getInvitation
    );
    // Ngo√†i th√¥ng tin c·ªßa c√°i board invitation m·ªõi t·∫°o th√¨ tr·∫£ v·ªÅ ƒë·ªß c·∫£ lu√¥n board, inviter, invitee cho FE tho·∫£i m√°i x·ª≠ l√Ω.
    const resInvitation = {
      ...getInvitation,
      board,
      inviter: pickUser(inviter),
      invitee: pickUser(invitee),
    };
    return resInvitation;
  } catch (error) {
    throw error;
  }
};

export const invitationService = {
  createNewBoardInvitation,
};
